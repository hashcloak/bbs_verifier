// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {BBS_Verifier, Pairing, BBS} from "../src/bbs_verify.sol";

contract BBS_VerifierTest is Test {
    BBS_Verifier.Signature public sig;
    BBS_Verifier.PublicKey public pk;
    BBS_Verifier.Proof public proof;
    uint256[] public msgScalar;

    function setUp() public {
        // msg
        msgScalar = [
            uint256(2266124219189018131),
            uint256(15553430782966677989),
            uint256(12252424663184168987),
            uint256(1969625583697874321),
            uint256(8798495767124183927),
            uint256(4743228516788447402),
            uint256(8902949269966882790),
            uint256(1449287668463434640),
            uint256(16234881692928710824),
            uint256(13179618089750662187),
            uint256(2132060277757908505),
            uint256(7469040032366907693),
            uint256(286998145258191934),
            uint256(12012091655379394047),
            uint256(8227232354837253112),
            uint256(4245507022592209702),
            uint256(15341480955034186690),
            uint256(13372014594622549612),
            uint256(4775774716639663789),
            uint256(3980695616762244981),
            uint256(13661186179188099084),
            uint256(11843969393565636405),
            uint256(584132371283407898),
            uint256(7718042704038564351),
            uint256(1113807059037267782),
            uint256(12590950049868647788),
            uint256(11822948952081078471),
            uint256(14688457861979401824),
            uint256(4766154862542150769),
            uint256(5861875202524790730),
            uint256(1386588526036119096)
        ];

        // signature
        sig.A = Pairing.G1Point(
            uint256(12262743719399765104324297133217313410504379841367627642954323830979587946235),
            uint256(18327965465112075665086919001053225492746144215044830517763973123812279571515)
        );
        sig.E = uint256(2959053813965312788910073130337795318296955434436133616036025405508129922727);

        // public key
        pk.PK = Pairing.G2Point(
            [
                uint256(18995555010723360870807378930627885936580090638932106191711429555833420406651),
                uint256(12645745131803946564517015766083220615208734349162119496713913738635122768190)
            ],
            [
                uint256(3610369380377107663814668440952629069799181095497307971279336242375649233639),
                uint256(15886074934859455688300902859116025241719978288647494891665273100122551253775)
            ]
        );

        // proof
        proof.aBar = Pairing.G1Point(
            uint256(17721035413297914547261957395377772614786490753912695184997855796561056967316),
            uint256(14736709814377230391693865339600670652427351100998007477986015049356398295600)
        );

        proof.bBar = Pairing.G1Point(
            uint256(6262760212432282898031472096066559063090737891140570402515874239001084078365),
            uint256(18550094210569717590755964082573860984899971795650648522737826136331072127879)
        );

        proof.d = Pairing.G1Point(
            uint256(8563479257185435434349345975526637402424140817471263359621940438881273951850),
            uint256(6524232713814974555053814212801730937932578227257759950892863721393300683066)
        );

        proof.eCap = uint256(10688937830315871506710122063192291435372192861179503287821778791137357184764);

        proof.r1Cap = uint256(19846112913671381762770825798462124121249273527833015076616077590705215437778);
        proof.r3Cap = uint256(10664201234776957822968578632555458105742595508395110963132109827780858466042);
        proof.commitments = new uint256[](28);
        proof.commitments[0] = uint256(7026936839203407178988055732103354318962795542024036774391668933963145498273);
        proof.commitments[1] = uint256(5345632071017108580963147080582060283432982590228860834579912564577377062159);
        proof.commitments[2] = uint256(14751884389302540353034068665160504873351077599856029446263897411093256399644);
        proof.commitments[3] = uint256(21361770332705903017462911380759786445587001353316288845701632908520124308810);
        proof.commitments[4] = uint256(1444391396849487604386189333903445676823278736296347299567613968865644917605);
        proof.commitments[5] = uint256(5890192680581010350852271515169692516973607641500554849270547610157439049918);
        proof.commitments[6] = uint256(16827158230581765148634474368875424989654177483560321198462001840686052206742);
        proof.commitments[7] = uint256(10483595471908988618700754006826962603116780107327656330891554444739325801573);
        proof.commitments[8] = uint256(3288076663445603174393511240463133422383511627191855149930112991227396852354);
        proof.commitments[9] = uint256(260380467876795157863986058998822817526656131835273868947335982083944916302);
        proof.commitments[10] = uint256(9028896430300912708807740880947355324700874749454105575683328184970571577309);
        proof.commitments[11] = uint256(19317704911546234727231147667177956108013627785957381473601780084716571198457);
        proof.commitments[12] = uint256(7405549106325935194053423459430037663461468921556885474872943021600323199512);
        proof.commitments[13] = uint256(9768453723430673259407196969260149745775101507381572022908428429487756826808);
        proof.commitments[14] = uint256(20460530679710285754430824929590970911751055400880209093303839162875783915351);
        proof.commitments[15] = uint256(6763843797504666662105138902642084794720613382311278347055995749369017194221);
        proof.commitments[16] = uint256(15806544823447526787611412148911327982908961658027838338426581218494201976381);
        proof.commitments[17] = uint256(3346619195690513562461068837612830071312898357420420146081544918952439060495);
        proof.commitments[18] = uint256(7143034204308267731373509239851517218678979551604104006172984328200656902423);
        proof.commitments[19] = uint256(19701348652588881410672814212937825453988706655563654221651923151147571219293);
        proof.commitments[20] = uint256(4928576536182758354826136100621412624881242368606227395824226860349011343436);
        proof.commitments[21] = uint256(14290276375730884967031118385185966834332260611225165704279535207300076645588);
        proof.commitments[22] = uint256(4372656218242619553386890555153774852994096146259030301629167224857728413434);
        proof.commitments[23] = uint256(12765459603001151204989233642331296819576791339489291327624856781136983689036);
        proof.commitments[24] = uint256(10981241609136903007664478763689124307581057544405296104395254909894535041982);
        proof.commitments[25] = uint256(6640020790620025392600428097936568862812719557524413098383652952701319231379);
        proof.commitments[26] = uint256(3341360333256908479354397618475765743363683939699734181471282432197785061720);
        proof.commitments[27] = uint256(16761058436191407166282466055844911757349123236110742078038426438800263322486);

        proof.challenge = uint256(7676392787844152301551421773140336616957656183078613308512391394721662889811);
    }

    function test_verify() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();

        bool res = verifier.verifySignature(pk, sig, msgScalar);
        assert(res);

        uint256[] memory disclosed_msg = new uint256[](3);
        uint8[] memory disclosed_indices = new uint8[](3);

        disclosed_msg[0] = msgScalar[0];
        disclosed_msg[1] = msgScalar[1];
        disclosed_msg[2] = msgScalar[5];

        disclosed_indices[0] = 0;
        disclosed_indices[1] = 1;
        disclosed_indices[2] = 5;

        bool res2 = verifier.coreProofVerify(pk, proof, disclosed_msg, disclosed_indices);
        assert(res2);
    }
}
