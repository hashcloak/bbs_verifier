// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {BBS_Verifier, Pairing, BBS} from "../src/bbs_verify.sol";
import "forge-std/console.sol";

contract BBS_VerifierTest is Test {
    BBS_Verifier.Signature public sig;
    BBS_Verifier.PublicKey public pk;
    BBS_Verifier.Proof public proof;

    function setUp() public {
        sig.A = Pairing.G1Point(
            uint256(6518957532561288284806978889353235007147412781973042229655530093817992345893),
            uint256(14113242567534957219063701299513155388684925141849341005159415617754010843574)
        );
        sig.E = uint256(1992218171307223762716653896284120426793108996079242542640684935869602299103);

        pk.PK = Pairing.G2Point(
            [
                uint256(18995555010723360870807378930627885936580090638932106191711429555833420406651),
                uint256(12645745131803946564517015766083220615208734349162119496713913738635122768190)
            ],
            [
                uint256(3610369380377107663814668440952629069799181095497307971279336242375649233639),
                uint256(15886074934859455688300902859116025241719978288647494891665273100122551253775)
            ]
        );

        proof.aBar = Pairing.G1Point(
            uint256(16910478290718135135843919339534819388840899518674765472793718002791978556724),
            uint256(1315502313945830867964304946034664453321750415177732528664796274805906434754)
        );

        proof.bBar = Pairing.G1Point(
            uint256(16835668825556574417377038662447168613450445685732373802619537359991307803319),
            uint256(3542665168339095819102441982943388097099411694741582039024596183459932222490)
        );

        proof.d = Pairing.G1Point(
            uint256(8478957310820301719640278728292126628436927508962273318387676102683680840449),
            uint256(16265697340485243190596943187436986021059228404662244694142885376248355271469)
        );

        proof.eCap = uint256(9332479956798815570946645099125166136561694608112356979752038203910582043369);

        proof.r1Cap = uint256(15991236801956430808663782491635457437820042041360077882082085180141902976862);
        proof.r3Cap = uint256(2485896963850409143836602276394193884650187774212181962797959289255245185136);
        proof.commitments = new uint256[](28);
        proof.commitments[0] = uint256(9598838461838392423544409804468805478409399851178458532602262914637619254399);
        proof.commitments[1] = uint256(8208513142432304812496994188874290832256759118257722081548621420420550740502);
        proof.commitments[2] = uint256(10717607520873251251977547193176195743298416356611220433354411201967516441190);
        proof.commitments[3] = uint256(9917426011531665357570557568227850336476597323096667375805770678057308406164);
        proof.commitments[4] = uint256(18168123696768639095228468355200458206495297892678454263529031611294156522691);
        proof.commitments[5] = uint256(12793925217840866373493031101983809093814759900368041211989643375591637070369);
        proof.commitments[6] = uint256(18073328110951767994251154229975486335499147459783721368785392032183826358037);
        proof.commitments[7] = uint256(14276267104566176791208125964710800891762993448682411995922209947731555405151);
        proof.commitments[8] = uint256(6854878999162457889834012297888538490685774475007780040785655525986426041468);
        proof.commitments[9] = uint256(8171189521613012962371928728538507667438979787237712071685056595106644767045);
        proof.commitments[10] = uint256(13622750418801810326480429357696726079342277942989913794651962463649316377902);
        proof.commitments[11] = uint256(19515826209179185336146834773000194471959514518267845150708697433280229367017);
        proof.commitments[12] = uint256(8298871880915530303606646781195673405261291109415615274087151008786747790380);
        proof.commitments[13] = uint256(17793524069700635559077680834332646518448935035899136493467211692951921274427);
        proof.commitments[14] = uint256(10998919527348905049673327985340030738640147946037670578457178880184407620350);
        proof.commitments[15] = uint256(13755127733096026476489777535020232897023662020422153149488065391781392806012);
        proof.commitments[16] = uint256(7454939789109745576341167984209890878055514059899467948256234424135184827583);
        proof.commitments[17] = uint256(16345823821285515352013206667333018351815722588148323568867518687332751220345);
        proof.commitments[18] = uint256(1667904848946398039651102944943145216237983927651619518288293435121350447748);
        proof.commitments[19] = uint256(15032058523615247723264490827486837910387243472300180559838464207505483456624);
        proof.commitments[20] = uint256(20860710951276717838168741833709407942791206486444445521529646580777064953191);
        proof.commitments[21] = uint256(8766392578679449953237761823065481386259170375898720910613349487009554403604);
        proof.commitments[22] = uint256(6467636161764348307762429239253762892706889820724826615717726428105454462631);
        proof.commitments[23] = uint256(5216192838845349186804675168284555258376935228502510185034747666300121516445);
        proof.commitments[24] = uint256(20934877522453293512677827215291602188377269848588687400709207810913895357710);
        proof.commitments[25] = uint256(12471808952806060199352188191163745932549952554127715951715982423560959245391);
        proof.commitments[26] = uint256(17200142614120617400368079043553365245549882674347396262015120763678230593499);
        proof.commitments[27] = uint256(9501782198712777539516749089234505537345886104517087042405706321276346137767);

        proof.challenge = uint256(13955571932877160789381516654212174441652092085432874070047454718791062279942);
    }

    function test_verify() public {
        uint256[31] memory msgScalar = [
            uint256(2266124219189018131),
            uint256(15553430782966677989),
            uint256(12252424663184168987),
            uint256(1969625583697874321),
            uint256(8798495767124183927),
            uint256(4743228516788447402),
            uint256(8902949269966882790),
            uint256(1449287668463434640),
            uint256(16234881692928710824),
            uint256(13179618089750662187),
            uint256(2132060277757908505),
            uint256(7469040032366907693),
            uint256(286998145258191934),
            uint256(12012091655379394047),
            uint256(8227232354837253112),
            uint256(4245507022592209702),
            uint256(15341480955034186690),
            uint256(13372014594622549612),
            uint256(4775774716639663789),
            uint256(3980695616762244981),
            uint256(13661186179188099084),
            uint256(11843969393565636405),
            uint256(584132371283407898),
            uint256(7718042704038564351),
            uint256(1113807059037267782),
            uint256(12590950049868647788),
            uint256(11822948952081078471),
            uint256(14688457861979401824),
            uint256(4766154862542150769),
            uint256(5861875202524790730),
            uint256(1386588526036119096)
        ];

        uint256[] memory msgS = new uint256[](msgScalar.length);
        for (uint256 i = 0; i < msgScalar.length; i++) {
            msgS[i] = msgScalar[i];
        }
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();

        bool res = verifier.verifySignature(pk, sig, msgS);
        assert(res);

        uint256[] memory disclosed_msg = new uint256[](3);
        uint8[] memory disclosed_indices = new uint8[](3);

        disclosed_msg[0] = msgScalar[0];
        disclosed_msg[1] = msgScalar[1];
        disclosed_msg[2] = msgScalar[5];

        disclosed_indices[0] = 0;
        disclosed_indices[1] = 1;
        disclosed_indices[2] = 5;

        bool res2 = verifier.coreProofVerify(pk, proof, disclosed_msg, disclosed_indices);
        assert(res2);

        uint256 res6 = verifier.hashToScalar("AAAgvdjhdcvewjdj", "AAA");
        assert(res6 == 11076720365362039283643694395156825345022289342419928458447580643523526976980);
    }
}
