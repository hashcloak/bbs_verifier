// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {BBS_Verifier, Pairing, BBS} from "../src/bbs_verify.sol";

contract BBS_VerifierTest is Test {
    BBS_Verifier.Signature public sig;
    BBS_Verifier.PublicKey public pk;
    BBS_Verifier.Proof public proof;
    uint256[] public msgScalar;

    function setUp() public {
        // msg
        msgScalar = [
            uint256(2266124219189018131),
            uint256(15553430782966677989),
            uint256(12252424663184168987),
            uint256(1969625583697874321),
            uint256(8798495767124183927),
            uint256(4743228516788447402),
            uint256(8902949269966882790),
            uint256(1449287668463434640),
            uint256(16234881692928710824),
            uint256(13179618089750662187),
            uint256(2132060277757908505),
            uint256(7469040032366907693),
            uint256(286998145258191934),
            uint256(12012091655379394047),
            uint256(8227232354837253112),
            uint256(4245507022592209702),
            uint256(15341480955034186690),
            uint256(13372014594622549612),
            uint256(4775774716639663789),
            uint256(3980695616762244981),
            uint256(13661186179188099084),
            uint256(11843969393565636405),
            uint256(584132371283407898),
            uint256(7718042704038564351),
            uint256(1113807059037267782),
            uint256(12590950049868647788),
            uint256(11822948952081078471),
            uint256(14688457861979401824),
            uint256(4766154862542150769),
            uint256(5861875202524790730),
            uint256(1386588526036119096)
        ];

        // signature
        sig.A = Pairing.G1Point(
            uint256(16605941458272293469898459593559962462499885703597334825353004900710945536242),
            uint256(15276896411257112930580737499920866088375905247814230771366087132031781450435)
        );
        sig.E = uint256(20145301027381071188604537375435971326340204640470956156185142406370688319043);

        // public key
        pk.PK = Pairing.G2Point(
            [
                uint256(18995555010723360870807378930627885936580090638932106191711429555833420406651),
                uint256(12645745131803946564517015766083220615208734349162119496713913738635122768190)
            ],
            [
                uint256(3610369380377107663814668440952629069799181095497307971279336242375649233639),
                uint256(15886074934859455688300902859116025241719978288647494891665273100122551253775)
            ]
        );

        proof.aBar = Pairing.G1Point(
            uint256(6405963818894633512500488485232508461378863995899784310159600027918894808450),
            uint256(8976186955010952831213034715487042244047720417741586958901326448590421470686)
        );
        proof.bBar = Pairing.G1Point(
            uint256(20165648201113026371430497168052996075094578039962696784870673007236807447067),
            uint256(15010509405116757220749160832711172483289539657444644690137500000544227154801)
        );
        proof.d = Pairing.G1Point(
            uint256(8986957979244676392051663251797981277637103251452242096971902552631567790191),
            uint256(21120558285122285912951039627072415411354366752130407371763240496977100489948)
        );
        proof.eCap = uint256(8675267513335268564640199227119950771150574365311777097870283344565947314651);
        proof.r1Cap = uint256(7567563490779567628541285166340704410484294369535452470113693232508505968543);
        proof.r3Cap = uint256(6579392919885006733769637005960889292350613654261021230838611689415221842234);
        proof.challenge = uint256(8346917860180351912122859828930931080929880512023462426888094268487507390109);

        proof.commitments = new uint256[](28);
        proof.commitments[0] = uint256(2702212026708064668680820999991819119461144522549944570848881264924467265370);
        proof.commitments[1] = uint256(9951093828808715651455795452755499666553659710387634719962899685546746257812);
        proof.commitments[2] = uint256(10466473285505616592863382050828925783491498080204645291749684543922647188359);
        proof.commitments[3] = uint256(11647411734432345603687929919718097401384913900793335744335975335617836941396);
        proof.commitments[4] = uint256(889819536473615921284543703458474494418655513103839422287234270915254427082);
        proof.commitments[5] = uint256(14809770328189882521243594516411309928620411911591523774115223885658772468350);
        proof.commitments[6] = uint256(20827374717310709384196104411147304205881827420653807527774691616991165323775);
        proof.commitments[7] = uint256(20430498204175443137065871938691889899807209606593258682388622664306592738519);
        proof.commitments[8] = uint256(8440047075924652272217920567758220876907505122526506623639333860278579028807);
        proof.commitments[9] = uint256(10331272704373571494424124761352004081813570247859708340977111866603298152006);
        proof.commitments[10] = uint256(4424643989958915777531494388391369392418771555609501248316886177866621444281);
        proof.commitments[11] = uint256(14342612567722663968404054250182249086021657201522936963314232636815885211754);
        proof.commitments[12] = uint256(19502957182375035057804027914696251295218916055867868398404116245497505502969);
        proof.commitments[13] = uint256(20000770782156659477874298727837229601899236556542299299938037866478435375587);
        proof.commitments[14] = uint256(5255336896708911438653474127365619748367522378591322723484646696848992213292);
        proof.commitments[15] = uint256(17414891979291727307071999526973202091218538875465302903840250298283414903362);
        proof.commitments[16] = uint256(9600540485590321058770353731278707803707681892696919432191533747652742054515);
        proof.commitments[17] = uint256(16486071762460512779493206924454849372151732219743856809986864954172148634836);
        proof.commitments[18] = uint256(1926617413971009252731283527687644753066744497192535884461181846306258010129);
        proof.commitments[19] = uint256(2262062394931760163151954900833180864498508712076710706034466878828711333901);
        proof.commitments[20] = uint256(20371538334959871318633549377207376271498356467712435292202616825263726667621);
        proof.commitments[21] = uint256(20369629430137390878137334804812733625345401736661711344876745604654980637311);
        proof.commitments[22] = uint256(6916439658839487731895113824684631674521127493094818665157808992827131001738);
        proof.commitments[23] = uint256(21588973014781210848662068436493273480831067525772880555083280778410975311779);
        proof.commitments[24] = uint256(15896818343906752017216463585162535310986673909098312069355752066312700293640);
        proof.commitments[25] = uint256(1512771494487729598501533498739421069638607180348389572136370284135009303676);
        proof.commitments[26] = uint256(20468515975599440828862099187772373806433851030235132129499407412237086546704);
        proof.commitments[27] = uint256(19433568231418556091277674380881556156275713380717029637629952481624104051955);
    }

    function test_verify() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();

        bool res = verifier.verifySignature(pk, sig, msgScalar);
        assert(res);
    }

    function test_proof_verify_init() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();
        uint256[] memory disclosed_msg = new uint256[](3);
        disclosed_msg[0] = 2266124219189018131;
        disclosed_msg[1] = 15553430782966677989;
        disclosed_msg[2] = 4743228516788447402;

        uint8[] memory disclosed_indices = new uint8[](3);
        disclosed_indices[0] = 0;
        disclosed_indices[1] = 1;
        disclosed_indices[2] = 5;

        BBS_Verifier.InitProof memory initProof;
        initProof.points[0] = Pairing.G1Point(
            uint256(6405963818894633512500488485232508461378863995899784310159600027918894808450),
            uint256(8976186955010952831213034715487042244047720417741586958901326448590421470686)
        );
        initProof.points[1] = Pairing.G1Point(
            uint256(20165648201113026371430497168052996075094578039962696784870673007236807447067),
            uint256(15010509405116757220749160832711172483289539657444644690137500000544227154801)
        );
        initProof.points[2] = Pairing.G1Point(
            uint256(8986957979244676392051663251797981277637103251452242096971902552631567790191),
            uint256(21120558285122285912951039627072415411354366752130407371763240496977100489948)
        );
        initProof.points[3] = Pairing.G1Point(
            uint256(10221517336427972967325634662943840604738151939735544266952774190214659671333),
            uint256(13984121971721795091087156416346121756648495155789225939028887459631915872143)
        );
        initProof.points[4] = Pairing.G1Point(
            uint256(1268252398698990105054652648653643548517694847305359088485160879175965022590),
            uint256(5758202331860613259065935441803511633962840631799737908661333197365656104405)
        );
        initProof.scalar = uint256(4661402122534330745222086575742781481159552639583525480514127238648290568236);

        BBS_Verifier.InitProof memory init_output =
            verifier.proofVerifyInit(pk, proof, disclosed_msg, disclosed_indices);
        assert(initProof.scalar == init_output.scalar);
        assert(initProof.points[3].X == init_output.points[3].X);
        assert(initProof.points[3].Y == init_output.points[3].Y);
        assert(initProof.points[4].X == init_output.points[4].X);
        assert(initProof.points[4].Y == init_output.points[4].Y);
    }
}

contract hashToCurve is Test {
    function test_hashToCurve() public view {
        uint256[2] memory res =
            Pairing.hashToPoint("BBS_QUUX-V01-CS02-with-BN254G1_XMD:SHA-256_SVDW_RO_H2G_HM2S_H2S_", "test");
        assert(res[0] == 4687667048072360499873766344051941265352748409069863031676580675735231660684);
        assert(res[1] == 470394146867402188632129722940165669297151995446560861816035625371464676675);
    }
}

contract modCalc is Test {
    function test_mul_mod() public view {
        uint256 res = Pairing.expMod(2, Pairing.PRIME_Q - 1, Pairing.PRIME_Q);
        assert(res == 1);
    }
}

contract sqrt is Test {
    function test_sqrt() public view {
        (uint256 res, bool is_sq) = Pairing.sqrt(121);
        assert(res == 11);
        assert(is_sq);
    }
}
