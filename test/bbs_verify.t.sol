// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {BBS_Verifier, Pairing, BBS} from "../src/bbs_verify.sol";

contract BBS_VerifierTest is Test {
    BBS_Verifier.Signature public sig;
    BBS_Verifier.PublicKey public pk;
    BBS_Verifier.Proof public proof;
    uint256[] public msgScalar;
    uint256[] public disclosed_msg = new uint256[](3);
    uint8[] public disclosed_indices = new uint8[](3);
    BBS_Verifier.InitProof public initProof;

    function setUp() public {
        // msg
        msgScalar = [
            uint256(2266124219189018131),
            uint256(15553430782966677989),
            uint256(12252424663184168987),
            uint256(1969625583697874321),
            uint256(8798495767124183927),
            uint256(4743228516788447402),
            uint256(8902949269966882790),
            uint256(1449287668463434640),
            uint256(16234881692928710824),
            uint256(13179618089750662187),
            uint256(2132060277757908505),
            uint256(7469040032366907693),
            uint256(286998145258191934),
            uint256(12012091655379394047),
            uint256(8227232354837253112),
            uint256(4245507022592209702),
            uint256(15341480955034186690),
            uint256(13372014594622549612),
            uint256(4775774716639663789),
            uint256(3980695616762244981),
            uint256(13661186179188099084),
            uint256(11843969393565636405),
            uint256(584132371283407898),
            uint256(7718042704038564351),
            uint256(1113807059037267782),
            uint256(12590950049868647788),
            uint256(11822948952081078471),
            uint256(14688457861979401824),
            uint256(4766154862542150769),
            uint256(5861875202524790730),
            uint256(1386588526036119096)
        ];

        // signature
        sig.A = Pairing.G1Point(
            uint256(18560110211758111409457254497318999076590696430315551100544651149487196532441),
            uint256(9253158186666056998999906264407871590983850237840297100821092165083672542422)
        );
        sig.E = uint256(14593612209139887880018211160667064594021517337981680648722278342913238211798);

        // public key
        pk.PK = Pairing.G2Point(
            [
                uint256(5753563513486561380542298642784954153646983623549823942489208891347364888733),
                uint256(17652527263370484832215630591020119309015921535647000282809810468824642031170)
            ],
            [
                uint256(16175590941729515442591004120732536622649782180454996203539989624698926591700),
                uint256(4821820852159715756877427048718686316054379094478095969767568465701080646242)
            ]
        );

        proof.aBar = Pairing.G1Point(
            uint256(4589785035873902068341417873604960519481583897204418666058475414382012351726),
            uint256(20970208301589133985681742138243432057150518795105541875968436518067907451482)
        );
        proof.bBar = Pairing.G1Point(
            uint256(494789428909681690645146828013689108054268116392169451749293989761121075245),
            uint256(17297246765270096457246040057082908839232893598408280949545770226231264303008)
        );
        proof.d = Pairing.G1Point(
            uint256(5753637097923463694110512927335594432498285696036803043736622864645821893845),
            uint256(7763217521923340286337553713448633798372460063374344530579106705314907885993)
        );
        proof.eCap = uint256(8042842032282577185618742748178918605750601718643454931428492117343952039038);
        proof.r1Cap = uint256(19579446147797020085082626411591675595364051185016480545372113683170864922634);
        proof.r3Cap = uint256(4516230118140551297436429895004240856013832273141665011691749625884080207354);
        proof.challenge = uint256(9170523218553528937204975447093012127133495368757073227285674220594594974338);

        proof.commitments = new uint256[](28);
        proof.commitments[0] = uint256(17792881980202731787526234274937780058085069479191903238906823842716306214812);
        proof.commitments[1] = uint256(5490119514502333332729615463314122543383712208334755349752023587140211405697);
        proof.commitments[2] = uint256(8889159508660262338321863253616291933494922456025680962524206950677875551279);
        proof.commitments[3] = uint256(9069561048618705417723902927725352725947307230585332809698064781724968067034);
        proof.commitments[4] = uint256(20969893955715799675734152993110834546643706880157866605773662861880465651067);
        proof.commitments[5] = uint256(18992254795544495368514124342807525827274043235883918021842172730625926706813);
        proof.commitments[6] = uint256(14107066283288679410313948191605430336257599969829422378683949903409387241861);
        proof.commitments[7] = uint256(12798941174073416197818145838604285932385561094171703550406719941108730266040);
        proof.commitments[8] = uint256(7707483228209930435601220614428470260454979817369328511181148436441189364252);
        proof.commitments[9] = uint256(11262475290933883039391017742343262691566224782110744908836640737065755077740);
        proof.commitments[10] = uint256(20025099778222518728998013782354089583639902533963312481516779660434642391386);
        proof.commitments[11] = uint256(10756483111048549875162036903848810583245448777908829437837498721453052300981);
        proof.commitments[12] = uint256(5647152189167844700359734420476822971758687100169609521874338153743197477480);
        proof.commitments[13] = uint256(6597777520175410638237560299448047126090708484661051367609535243803437578595);
        proof.commitments[14] = uint256(2842749640235199581966772189142285932173353551113407861190259580874923768210);
        proof.commitments[15] = uint256(8100729913959445213266603261363507349758311134743628864205342530610132032731);
        proof.commitments[16] = uint256(18464513909237023511808358407416412607248496403674383674269261481921398236651);
        proof.commitments[17] = uint256(20804683512780541730456550307292592384947875235703111243674677825086272759966);
        proof.commitments[18] = uint256(3429593186662195935096221738432760090703045873994959001388531410854056609164);
        proof.commitments[19] = uint256(20454320943614726678297451940346778110920218678288721887823293454833947818188);
        proof.commitments[20] = uint256(6857251212744083045997730459448394274381066615951269234611492745730845498418);
        proof.commitments[21] = uint256(14742257749293642622734794076507628340506139847594980214581451413113499961427);
        proof.commitments[22] = uint256(12246699489562568425338334745874046921145259134913765828527381619293537499424);
        proof.commitments[23] = uint256(13417706375138770649263189175295971157348919314915824794971570392768751224714);
        proof.commitments[24] = uint256(14932843913903189152044822214369631098581507006906059224083721437059566611948);
        proof.commitments[25] = uint256(16736877594037174310126934822629376254973535401043750021946965372895587488488);
        proof.commitments[26] = uint256(9510282590851897620616131906689045795242783177500978291791620055703189601120);
        proof.commitments[27] = uint256(16287576082505117925628461501366254697615855474701713406049352554328601724125);

        disclosed_msg[0] = 2266124219189018131;
        disclosed_msg[1] = 15553430782966677989;
        disclosed_msg[2] = 4743228516788447402;

        disclosed_indices[0] = 0;
        disclosed_indices[1] = 1;
        disclosed_indices[2] = 5;

        initProof.points[0] = Pairing.G1Point(
            uint256(4589785035873902068341417873604960519481583897204418666058475414382012351726),
            uint256(20970208301589133985681742138243432057150518795105541875968436518067907451482)
        );
        initProof.points[1] = Pairing.G1Point(
            uint256(494789428909681690645146828013689108054268116392169451749293989761121075245),
            uint256(17297246765270096457246040057082908839232893598408280949545770226231264303008)
        );
        initProof.points[2] = Pairing.G1Point(
            uint256(5753637097923463694110512927335594432498285696036803043736622864645821893845),
            uint256(7763217521923340286337553713448633798372460063374344530579106705314907885993)
        );
        initProof.points[3] = Pairing.G1Point(
            uint256(6611873073341182289283590762314481902854760470835093185430710671814862240453),
            uint256(14440086804843035476175025645886595973522367063881962137027138447185139043896)
        );
        initProof.points[4] = Pairing.G1Point(
            uint256(437030025586557310626084667197385398060437403959818122971050293505038543942),
            uint256(14826402650986166312056692107563140793238833337671477194368246954293532362573)
        );
        initProof.scalar = uint256(10292285624696250102528155226431512323443546267207964357395200222618557155767);
    }

    function test_verify() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();

        bool res = verifier.verifySignature(pk, sig, msgScalar);
        assert(res);
    }

    function test_compressG1() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();
        bytes memory expected = hex"f0ab15199655d3f279e6b81547d8159315bdb6b1bc3202f43fea6bc59abf6987";
        bytes memory res = verifier.serializeCompressed(
            Pairing.G1Point(
                uint256(3353031288059533942658390886683067124040920775575537747144343083137631628272),
                uint256(19321533766552368860946552437480515441416830039777911637913418824951667761761)
            )
        );
        for (uint256 i = 0; i < res.length; i++) {
            assert(res[i] == expected[i]);
        }
    }

    function test_compressG2() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();
        bytes memory expected =
            hex"d81064a090837013919a8aaef85ddbf5ea4839603c77e5f4132d303b429c532ea1b228e410e57106d55937afc57ab5572416e1de08121c9dd95fb561f5cc098a";
        bytes memory res = verifier.serializeCompressedG2(
            Pairing.G2Point(
                [
                    uint256(4540444681147253467785307942530223364530218361853237193970751657229138047649),
                    uint256(20954117799226682825035885491234530437475518021362091509513177301640194298072)
                ],
                [
                    uint256(11631839690097995216017572651900167465857396346217730511548857041925508482915),
                    uint256(21508930868448350162258892668132814424284302804699005394342512102884055673846)
                ]
            )
        );

        for (uint256 i = 0; i < res.length; i++) {
            assert(res[i] == expected[i]);
        }
    }

    function test_proof_verify_init() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();
        BBS_Verifier.InitProof memory init_output =
            verifier.proofVerifyInit(pk, proof, disclosed_msg, disclosed_indices);
        assert(initProof.scalar == init_output.scalar);
        assert(initProof.points[3].X == init_output.points[3].X);
        assert(initProof.points[3].Y == init_output.points[3].Y);
        assert(initProof.points[4].X == init_output.points[4].X);
        assert(initProof.points[4].Y == init_output.points[4].Y);
    }

    function test_calculateDomain() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();
        uint256 domain = verifier.calculate_domain(pk, 31);
        assert(domain == uint256(10292285624696250102528155226431512323443546267207964357395200222618557155767));
    }

    function testProofChallengeCalculate() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();
        uint256 challenge = verifier.calculateProofChallenge(initProof, disclosed_msg, disclosed_indices);

        assert(challenge == proof.challenge);
    }

    function testProofVerify() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();
        bool res = verifier.verifyProof(pk, proof, disclosed_msg, disclosed_indices);
        assert(res);
    }

    function test_verify2() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();
        BBS_Verifier.PublicKey memory pk2 = BBS_Verifier.PublicKey(
            Pairing.G2Point(
                [
                    uint256(18995555010723360870807378930627885936580090638932106191711429555833420406651),
                    uint256(12645745131803946564517015766083220615208734349162119496713913738635122768190)
                ],
                [
                    uint256(3610369380377107663814668440952629069799181095497307971279336242375649233639),
                    uint256(15886074934859455688300902859116025241719978288647494891665273100122551253775)
                ]
            )
        );

        BBS_Verifier.Signature memory sig2 = BBS_Verifier.Signature(
            Pairing.G1Point(
                uint256(3713704801856867074294728565129584267576935034681994455417684838024576978440),
                uint256(12419719713076645181395890013321702362835444106155632949087158058409897221615)
            ),
            uint256(7311362562374260856004061426109311681200751001880659847665478813239839874058)
        );

        uint256[] memory msgScalar2 = new uint256[](1);
        msgScalar2[0] = uint256(4906353686637486681420203429419541947626016402655996564089218011210122599858);
        bool res = verifier.verifySignature(pk2, sig2, msgScalar2);
        assert(res);
    }
}
