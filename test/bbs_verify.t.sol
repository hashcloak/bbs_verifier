// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {BBS_Verifier, Pairing, BBS} from "../src/bbs_verify.sol";

contract BBS_VerifierTest is Test {
    BBS_Verifier.Signature public sig;
    BBS_Verifier.PublicKey public pk;
    BBS_Verifier.Proof public proof;
    uint256[] public msgScalar;
    uint256[] public disclosed_msg = new uint256[](3);
    uint8[] public disclosed_indices = new uint8[](3);
    BBS_Verifier.InitProof public initProof;

    function setUp() public {
        // msg
        msgScalar = [
            uint256(2266124219189018131),
            uint256(15553430782966677989),
            uint256(12252424663184168987),
            uint256(1969625583697874321),
            uint256(8798495767124183927),
            uint256(4743228516788447402),
            uint256(8902949269966882790),
            uint256(1449287668463434640),
            uint256(16234881692928710824),
            uint256(13179618089750662187),
            uint256(2132060277757908505),
            uint256(7469040032366907693),
            uint256(286998145258191934),
            uint256(12012091655379394047),
            uint256(8227232354837253112),
            uint256(4245507022592209702),
            uint256(15341480955034186690),
            uint256(13372014594622549612),
            uint256(4775774716639663789),
            uint256(3980695616762244981),
            uint256(13661186179188099084),
            uint256(11843969393565636405),
            uint256(584132371283407898),
            uint256(7718042704038564351),
            uint256(1113807059037267782),
            uint256(12590950049868647788),
            uint256(11822948952081078471),
            uint256(14688457861979401824),
            uint256(4766154862542150769),
            uint256(5861875202524790730),
            uint256(1386588526036119096)
        ];

        // signature
        sig.A = Pairing.G1Point(
            uint256(18560110211758111409457254497318999076590696430315551100544651149487196532441),
            uint256(9253158186666056998999906264407871590983850237840297100821092165083672542422)
        );
        sig.E = uint256(14593612209139887880018211160667064594021517337981680648722278342913238211798);

        // public key
        pk.PK = Pairing.G2Point(
            [
                uint256(5753563513486561380542298642784954153646983623549823942489208891347364888733),
                uint256(17652527263370484832215630591020119309015921535647000282809810468824642031170)
            ],
            [
                uint256(16175590941729515442591004120732536622649782180454996203539989624698926591700),
                uint256(4821820852159715756877427048718686316054379094478095969767568465701080646242)
            ]
        );

        // proof.aBar = Pairing.G1Point(
        //     uint256(17705900040482640200318765868397816899423300068827258330107828571873441470719),
        //     uint256(7713906401864379473036154127800301923576930562959621253303600800199073334118)
        // );
        // proof.bBar = Pairing.G1Point(
        //     uint256(21727344193746663605105815693486793700736011477614477583899999224491814279994),
        //     uint256(3107868243865832229708730395440182823160504417487161073020576660932813536129)
        // );
        // proof.d = Pairing.G1Point(
        //     uint256(15259877521667048732653966731531866330870155623999372073511953831671978329220),
        //     uint256(10346279138881905705140583326619164208036592391424952436660826945178815367429)
        // );
        // proof.eCap = uint256(895560299474401253372773501875631392367182095767290314841076259590095084586);
        // proof.r1Cap = uint256(11193219439787925012791936928927829256760578552338662201715987339199095941227);
        // proof.r3Cap = uint256(15267152252107021640270952755495037380174121953972815385187286027940019996824);
        // proof.challenge = uint256(17070931957668459394149291496811547077907740596908548642717845173554837520766);

        // proof.commitments = new uint256[](28);
        // proof.commitments[0] = uint256(19095727655211535891907424632625597788660896504069139787113033189477200901164);
        // proof.commitments[1] = uint256(19376086836081848875356199522059787747649523185103503820918546873546803656837);
        // proof.commitments[2] = uint256(294630661519046963443548105138813757424736295965011860489516719425258301868);
        // proof.commitments[3] = uint256(2669991038723578516998124743106790553264755193437596445025159197580315246913);
        // proof.commitments[4] = uint256(9347384312453102707431895387088312145715418559983462799650963982682084827252);
        // proof.commitments[5] = uint256(10423402888507524428295410032922396350307052955495214158940561611559586857682);
        // proof.commitments[6] = uint256(21667666739487631443855567302732869873626852318523924021971922974064015548203);
        // proof.commitments[7] = uint256(2391574914373737044908304675905879726184592881619003159020770247137231086890);
        // proof.commitments[8] = uint256(6278153666110445575600940082413845807068412500507616321015839605239269964481);
        // proof.commitments[9] = uint256(17407116680557453084774309595190475554418201715886488721842472385513811947490);
        // proof.commitments[10] = uint256(8501318769770573792305740921919152496772914721536223890699332307683117426648);
        // proof.commitments[11] = uint256(10051701914974888853862296233599397109887353152719520271166239879253384300084);
        // proof.commitments[12] = uint256(4629893339370850175540759987958849789651933707400277961494579665229717132314);
        // proof.commitments[13] = uint256(19733193495966317727151773873301557383437837661981698399123721056474042649121);
        // proof.commitments[14] = uint256(16581440502746205531254170374821787090797536920805429488227888885103068899696);
        // proof.commitments[15] = uint256(4648351001408854396093087060766510007903087217506064759222363505293687917509);
        // proof.commitments[16] = uint256(5232978090956285957326199431497654863020266920439885149705611444557525841377);
        // proof.commitments[17] = uint256(10378971376370607204122093933171648619962601242767826857548254941729314144779);
        // proof.commitments[18] = uint256(10636096558455749185044536222842024797504005940994930068820626467354940043941);
        // proof.commitments[19] = uint256(13014117807481833912707217404666717118061234026083047800320547313575178119938);
        // proof.commitments[20] = uint256(9468061149785714375845841584548255079305964111362932915002031399165874890540);
        // proof.commitments[21] = uint256(12080296571110568157656356440360410776064799132442611756186811013992503842789);
        // proof.commitments[22] = uint256(8406199401805359744205934469936213843102959323070335564794326616494411213164);
        // proof.commitments[23] = uint256(13146762841746050965674929823955906169083360848059985425714661251008235930384);
        // proof.commitments[24] = uint256(18062184243758250054044805146678460481140799371280738494887026946927689738624);
        // proof.commitments[25] = uint256(4689669766214571146361709842956272925578589085257066757670840626355289827344);
        // proof.commitments[26] = uint256(19717012933748023731747259246552232456988022985282562051094427191782572854304);
        // proof.commitments[27] = uint256(19403246504848923420955727303103540860884754495247099508968984133479080201474);

        // disclosed_msg[0] = 2266124219189018131;
        // disclosed_msg[1] = 15553430782966677989;
        // disclosed_msg[2] = 4743228516788447402;

        // disclosed_indices[0] = 0;
        // disclosed_indices[1] = 1;
        // disclosed_indices[2] = 5;

        // initProof.points[0] = Pairing.G1Point(
        //     uint256(17705900040482640200318765868397816899423300068827258330107828571873441470719),
        //     uint256(7713906401864379473036154127800301923576930562959621253303600800199073334118)
        // );
        // initProof.points[1] = Pairing.G1Point(
        //     uint256(21727344193746663605105815693486793700736011477614477583899999224491814279994),
        //     uint256(3107868243865832229708730395440182823160504417487161073020576660932813536129)
        // );
        // initProof.points[2] = Pairing.G1Point(
        //     uint256(15259877521667048732653966731531866330870155623999372073511953831671978329220),
        //     uint256(10346279138881905705140583326619164208036592391424952436660826945178815367429)
        // );
        // initProof.points[3] = Pairing.G1Point(
        //     uint256(9450541227839351281812164523351865265510569098677555890572077252104786626690),
        //     uint256(9197258858130081208441965628507147760561818479091872534935021928583764617680)
        // );
        // initProof.points[4] = Pairing.G1Point(
        //     uint256(5816804290213296793101908964222774752394739247046217083058295650122051844227),
        //     uint256(1590091680226237410825658942611263221992039739303345139797440692938537664171)
        // );
        // initProof.scalar = uint256(4661402122534330745222086575742781481159552639583525480514127238648290568236);
    }

    function test_verify() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();

        bool res = verifier.verifySignature(pk, sig, msgScalar);
        assert(res);
    }

    function test_compressG1() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();
        bytes memory expected = hex"f0ab15199655d3f279e6b81547d8159315bdb6b1bc3202f43fea6bc59abf6987";
        bytes memory res = verifier.serializeCompressed(
            Pairing.G1Point(
                uint256(3353031288059533942658390886683067124040920775575537747144343083137631628272),
                uint256(19321533766552368860946552437480515441416830039777911637913418824951667761761)
            )
        );
        for (uint256 i = 0; i < res.length; i++) {
            assert(res[i] == expected[i]);
        }
    }

    function test_compressG2() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();
        bytes memory expected =
            hex"d81064a090837013919a8aaef85ddbf5ea4839603c77e5f4132d303b429c532ea1b228e410e57106d55937afc57ab5572416e1de08121c9dd95fb561f5cc098a";
        bytes memory res = verifier.serializeCompressedG2(
            Pairing.G2Point(
                [
                    uint256(4540444681147253467785307942530223364530218361853237193970751657229138047649),
                    uint256(20954117799226682825035885491234530437475518021362091509513177301640194298072)
                ],
                [
                    uint256(11631839690097995216017572651900167465857396346217730511548857041925508482915),
                    uint256(21508930868448350162258892668132814424284302804699005394342512102884055673846)
                ]
            )
        );

        for (uint256 i = 0; i < res.length; i++) {
            assert(res[i] == expected[i]);
        }
    }

    function test_calculateDomain() public {
        BBS_Verifier verifier;
        verifier = new BBS_Verifier();
        uint256 domain = verifier.calculate_domain(pk, 31);
        assert(domain == uint256(10292285624696250102528155226431512323443546267207964357395200222618557155767));
    }

    // function test_proof_verify_init() public {
    //     BBS_Verifier verifier;
    //     verifier = new BBS_Verifier();
    //     BBS_Verifier.InitProof memory init_output =
    //         verifier.proofVerifyInit(pk, proof, disclosed_msg, disclosed_indices);

    //     assert(initProof.scalar == init_output.scalar);
    //     assert(initProof.points[3].X == init_output.points[3].X);
    //     assert(initProof.points[3].Y == init_output.points[3].Y);
    //     assert(initProof.points[4].X == init_output.points[4].X);
    //     assert(initProof.points[4].Y == init_output.points[4].Y);
    // }

    // function testProofChallengeCalculate() public {
    //     BBS_Verifier verifier;
    //     verifier = new BBS_Verifier();
    //     uint256 challenge = verifier.calculateProofChallenge(initProof, disclosed_msg, disclosed_indices);

    //     assert(challenge == uint256(17070931957668459394149291496811547077907740596908548642717845173554837520766));
    // }

    // function testProofVerify() public {
    //     BBS_Verifier verifier;
    //     verifier = new BBS_Verifier();
    //     bool res = verifier.verifyProof(pk, proof, disclosed_msg, disclosed_indices);
    //     assert(res);
    // }
}
